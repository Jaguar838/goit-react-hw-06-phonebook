{"version":3,"sources":["components/Filter/Filter.module.scss","components/ContactItem/ContactItem.module.css","UI/Input/Input.module.css","components/ContactList/ContactList.module.css","redux/contacts/selectors.js","UI/Button/Button.style.js","UI/Button/Button.jsx","UI/Input/Input.jsx","UI/Layout/Layout.style.js","UI/Layout/Layout.jsx","UI/SectionWrap/SectionWrap.style.js","UI/SectionWrap/SectionWrap.jsx","redux/contacts/actions.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","redux/contacts/reducer.js","redux/store.js","index.js"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","getFilteredContacts","name","toLowerCase","includes","get_isPhonebook","length","Btn","styled","button","Button","children","onClick","defaultProps","Input","props","className","css","input","type","Container","div","Layout","Section","Title","h3","SectionWrap","title","addContact","createAction","deleteContact","changeFilter","ContactForm","dispatch","useDispatch","useSelector","useState","phone","contact","setContact","validateForm","allContasts","newName","isExistContact","some","toast","error","onCheckUnique","resetForm","position","reverseOrder","onSubmit","evt","preventDefault","newContact","id","Date","now","console","log","value","onChange","target","placeholder","pattern","ContactItem","onRemove","item","span","ContactList","visibleContacts","map","key","Filter","label","labelText","required","App","isPhonebook","createReducer","payload","_","contactsReducer","combineReducers","contactsPersistConfig","storage","blacklist","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","concat","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.09b391ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1JgZC\",\"labelText\":\"Filter_labelText__25q76\",\"input\":\"Filter_input__1QcQD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__3g4w5\",\"span\":\"ContactItem_span__1lRTI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2PQf4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__3ehm9\"};","// Для передачи данных из глобального стейта в компонент используються\n//    селекторы.\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = state => {\n    const contacts = getContacts(state);\n    const filter = getFilter(state);\n\n    return contacts.filter(({ name }) => name.toLowerCase().includes(filter));\n};\n\nexport const get_isPhonebook = state => state.contacts.items.length > 0;\n","import styled from 'styled-components';\r\n\r\nexport const Btn = styled.button`\r\n    cursor: pointer;\r\n    color: #7366ff;\r\n    font-weight: 500;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    background-color: rgba(115, 102, 255, 0.15);\r\n    transition: all 0.3s ease;\r\n\r\n    display: inline-block;\r\n    margin: 0 10px;\r\n    padding: 10px;\r\n    min-width: 120px;\r\n    background-color: #30d5c8;\r\n    color: #ffffff;\r\n    font-weight: 700;\r\n    font-size: 14px;\r\n    letter-spacing: 0.02em;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    border-radius: 4px;\r\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\r\n    border: none;\r\n    cursor: pointer;\r\n    transition-property: color, background-color, box-shadow;\r\n    transition-duration: 250ms;\r\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n    &:hover,\r\n    &:focus {\r\n        color: #fff;\r\n        background-color: #7366ff;\r\n\r\n        color: #30d5c8;\r\n        background-color: #ffffff;\r\n        box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1),\r\n            0px 1px 2px rgba(0, 0, 0, 0.08), 0px 2px 2px rgba(0, 0, 0, 0.12);\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Btn } from './Button.style';\r\n\r\nconst Button = ({ children, onClick }) => (\r\n    <Btn onClick={onClick}>{children}</Btn>\r\n);\r\n\r\nButton.defaultProps = {\r\n    children: '',\r\n};\r\n\r\nButton.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport css from './Input.module.css';\n\nconst Input = props => {\n    return <input className={css.input} {...props} type=\"text\" />;\n};\n\nexport default Input;\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  width: 1280px;\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n\r\n  @media (max-width: 1283px) {\r\n    width: 940px;\r\n  }\r\n\r\n  @media (max-width: 992px) {\r\n    width: 700px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 520px;\r\n  }\r\n\r\n  @media (max-width: 576px) {\r\n    width: 90%;\r\n  }\r\n`;\r\n","import { Container } from './Layout.style';\r\nimport React from 'react';\r\n\r\nconst Layout = ({ children }) => <Container>{children}</Container>;\r\n\r\nexport default Layout;\r\n","import styled from 'styled-components';\r\n\r\nexport const Section = styled.div`\r\n    padding-top: 35px;\r\n    padding-bottom: 35px;\r\n    background-color: #fff;\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n    border-radius: 7px;\r\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\r\n    border: 1px solid rgba(128, 128, 128, 0.4);\r\n    margin-bottom: 30px;\r\n`;\r\n\r\nexport const Title = styled.h3`\r\n    margin-bottom: 15px;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Section, Title } from './SectionWrap.style';\r\n\r\nconst SectionWrap = ({ title, children }) => (\r\n    <Section>\r\n        {title && <Title>{title}</Title>}\r\n        {children}\r\n    </Section>\r\n);\r\n\r\nSectionWrap.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default SectionWrap;\r\n","// Создаем действия(action) для каждого reduser(a).\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('add');\n\nexport const deleteContact = createAction('delete');\nexport const checkUnique = createAction('checkUnique');\n\nexport const changeFilter = createAction('changeFilter');\n","import React, { useState } from 'react';\nimport { Button, Input } from 'UI';\nimport toast, { Toaster } from 'react-hot-toast';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/actions';\n\nexport function ContactForm() {\n    const dispatch = useDispatch();\n    const contacts = useSelector(getContacts);\n\n    const [contact, setContact] = useState({ name: '', phone: '' });\n\n    const onCheckUnique = (allContasts, newName) => {\n        const isExistContact = allContasts.some(\n            contact => contact.name.toLowerCase() === newName.toLowerCase(),\n        );\n        isExistContact && toast.error(`\"${newName}\" is already exist`);\n        return !isExistContact;\n    };\n    function validateForm() {\n        if (!contact.name || !contact.phone) {\n            toast.error('Some field is empty');\n            return false;\n        }\n        return onCheckUnique(contacts, contact.name);\n    }\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        const newContact = {\n            id: Date.now(),\n            ...contact,\n        };\n        const isValidateForm = validateForm();\n        if (!isValidateForm) return;\n        dispatch(addContact(newContact));\n        resetForm();\n        console.log('Submit', newContact);\n    };\n\n    const resetForm = () => {\n        setContact({ name: '', phone: '' });\n    };\n    return (\n        <>\n            <Toaster position=\"top-center\" reverseOrder={false} />\n            <form onSubmit={handleSubmit}>\n                <Input\n                    name=\"name\"\n                    value={contact.name}\n                    type=\"text\"\n                    onChange={({ target }) =>\n                        setContact({ ...contact, name: target.value })\n                    }\n                    placeholder=\"Enter name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов.\"\n                    // required\n                />\n\n                <Input\n                    name=\"phone\"\n                    value={contact.phone}\n                    type=\"tel\"\n                    onChange={({ target }) =>\n                        setContact({ ...contact, phone: target.value })\n                    }\n                    placeholder=\"Enter phone number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    // required\n                />\n\n                <Button type=\"submit\">Add Contact</Button>\n            </form>\n        </>\n        // {errors.name && toast('Name is required.')}\n        // {errors.phone && toast('Please enter number for phone.')}\n    );\n}\n","import React from 'react';\nimport { Button } from 'UI';\n\nimport css from './ContactItem.module.css';\n\nexport const ContactItem = ({ name, phone, onRemove }) => {\n    return (\n        <li className={css.item}>\n            <span className={css.span}>\n                {name}:{phone}\n            </span>\n            <Button className=\"btn\" onClick={onRemove}>\n                Delete\n            </Button>\n        </li>\n    );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from 'redux/contacts/selectors';\n\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport css from './ContactList.module.css';\nimport { deleteContact } from 'redux/contacts/actions';\n\nexport const ContactList = () => {\n    const visibleContacts = useSelector(getFilteredContacts);\n    const dispatch = useDispatch();\n    const onRemove = id => dispatch(deleteContact(id));\n    return (\n        <ul className={css.contacts}>\n            {visibleContacts?.map(({ id, name, phone }) => (\n                <ContactItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    phone={phone}\n                    onRemove={() => onRemove(id)}\n                />\n            ))}\n        </ul>\n    );\n};\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from 'redux/contacts/selectors';\r\nimport css from './Filter.module.scss';\r\nimport { changeFilter } from 'redux/contacts/actions';\r\n\r\nexport const Filter = () => {\r\n    const filter = useSelector(getFilter);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <label className={css.label}>\r\n            <span className={css.labelText}>Find contacts by name</span>\r\n            <input\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={filter}\r\n                onChange={({ target }) => dispatch(changeFilter(target.value))}\r\n                placeholder=\"Enter name for Search\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                className={css.input}\r\n            />\r\n        </label>\r\n    );\r\n};\r\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { get_isPhonebook } from 'redux/contacts/selectors';\n\nimport { Layout, SectionWrap } from 'UI';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\n\nexport default function App() {\n    const isPhonebook = useSelector(get_isPhonebook);\n\n    return (\n        <Layout>\n            <SectionWrap title=\"Phonebook\">\n                <ContactForm />\n            </SectionWrap>\n\n            <SectionWrap title=\"Contact List\">\n                {isPhonebook ? (\n                    <>\n                        <Filter />\n                        <ContactList />\n                    </>\n                ) : (\n                    <p>Phonebook is empty</p>\n                )}\n            </SectionWrap>\n        </Layout>\n    );\n}\n","// Создаем отдельные части стейта - reducer(ы).\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, changeFilter } from './actions';\nimport { combineReducers } from 'redux';\n\nconst initialState = [\n    { id: 'id-1', name: 'Rosie Simpson', phone: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', phone: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', phone: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', phone: '227-91-26' },\n];\n// Прописываем в reducer логику взаимодействия с экшенами, где обработка каждого\n//  экшена это свойство обьекта\n// ключом являеться имя экшена(в[]), а значением результат вызова анонимной стрелочной ф-и.\n\nconst items = createReducer(initialState, {\n    [addContact]: (state, { payload }) => [...state, payload],\n    [deleteContact]: (state, { payload }) =>\n        state.filter(({ id }) => id !== payload),\n});\nconst filter = createReducer('', {\n    [changeFilter]: (_, { payload }) => payload,\n});\n\nexport const contactsReducer = combineReducers({\n    items,\n    filter,\n});\n","// Создаем глобальный стейт он же store.\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { logger } from 'redux-logger';\nimport { contactsReducer } from './contacts/reducer';\n\nconst contactsPersistConfig = {\n    key: 'contacts',\n    storage,\n    blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n    reducer: {\n        contacts: persistReducer(contactsPersistConfig, contactsReducer),\n    },\n    middleware: getDefaultMiddleware =>\n        getDefaultMiddleware({ serializableCheck: false }).concat(logger),\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","// Заворачиваем все приложение в файле index.js в компонент Provider и передаем\n//    в store через props.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}