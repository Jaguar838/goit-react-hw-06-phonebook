{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.scss","components/ContactForm/ContactForm.module.css","UI/Layout/Layout.style.js","UI/Layout/Layout.jsx","UI/SectionWrap/SectionWrap.style.js","UI/SectionWrap/SectionWrap.jsx","UI/Button/Button.style.js","UI/Button/Button.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","hooks/useLocalStorage.js","redux/contacts/actions.js","redux/contacts/reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","styled","div","Layout","children","Section","Title","h3","SectionWrap","title","Btn","button","Button","onClick","defaultProps","ContactForm","onAdd","onCheckUnique","useForm","register","handleSubmit","errors","formState","useState","name","setName","phone","setPhone","handleChangeForm","target","value","resetForm","onSubmit","data","alert","id","uuid","console","log","className","css","input","type","placeholder","required","pattern","onChange","ContactListItem","onRemove","item","span","ContactList","contacts","map","key","Filter","filter","label","labelText","App","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","testContacts","setContacts","setFilter","newContact","prevState","isExistContact","find","contact","toLowerCase","includes","addContact","createAction","payload","uuidv4","number","deleteContact","changeFilter","items","createReducer","_","combineReducers","contactsPersistConfig","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","concat","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.73e5e3c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__3ehm9\",\"span\":\"ContactList_span__1V20R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1JgZC\",\"labelText\":\"Filter_labelText__25q76\",\"input\":\"Filter_input__1QcQD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__3sa9e\"};","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  width: 1280px;\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n\r\n  @media (max-width: 1283px) {\r\n    width: 940px;\r\n  }\r\n\r\n  @media (max-width: 992px) {\r\n    width: 700px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 520px;\r\n  }\r\n\r\n  @media (max-width: 576px) {\r\n    width: 90%;\r\n  }\r\n`;\r\n","import { Container } from './Layout.style';\r\nimport React from 'react';\r\n\r\nconst Layout = ({ children }) => <Container>{children}</Container>;\r\n\r\nexport default Layout;\r\n","import styled from 'styled-components';\r\n\r\nexport const Section = styled.div`\r\n    padding-top: 35px;\r\n    padding-bottom: 35px;\r\n    background-color: #fff;\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n    border-radius: 7px;\r\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\r\n    border: 1px solid rgba(128, 128, 128, 0.4);\r\n    margin-bottom: 30px;\r\n`;\r\n\r\nexport const Title = styled.h3`\r\n    margin-bottom: 15px;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Section, Title } from './SectionWrap.style';\r\n\r\nconst SectionWrap = ({ title, children }) => (\r\n    <Section>\r\n        {title && <Title>{title}</Title>}\r\n        {children}\r\n    </Section>\r\n);\r\n\r\nSectionWrap.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default SectionWrap;\r\n","import styled from 'styled-components';\r\n\r\nexport const Btn = styled.button`\r\n    cursor: pointer;\r\n    color: #7366ff;\r\n    font-weight: 500;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    background-color: rgba(115, 102, 255, 0.15);\r\n    transition: all 0.3s ease;\r\n\r\n    display: inline-block;\r\n    margin: 0 10px;\r\n    padding: 10px;\r\n    min-width: 120px;\r\n    background-color: #30d5c8;\r\n    color: #ffffff;\r\n    font-weight: 700;\r\n    font-size: 14px;\r\n    letter-spacing: 0.02em;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    border-radius: 4px;\r\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\r\n    border: none;\r\n    cursor: pointer;\r\n    transition-property: color, background-color, box-shadow;\r\n    transition-duration: 250ms;\r\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n    &:hover,\r\n    &:focus {\r\n        color: #fff;\r\n        background-color: #7366ff;\r\n\r\n        color: #30d5c8;\r\n        background-color: #ffffff;\r\n        box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1),\r\n            0px 1px 2px rgba(0, 0, 0, 0.08), 0px 2px 2px rgba(0, 0, 0, 0.12);\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Btn } from './Button.style';\r\n\r\nconst Button = ({ children, onClick }) => (\r\n    <Btn onClick={onClick}>{children}</Btn>\r\n);\r\n\r\nButton.defaultProps = {\r\n    children: '',\r\n};\r\n\r\nButton.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport uuid from 'react-uuid';\r\nimport { Button } from 'UI/Button';\r\nimport css from './ContactForm.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport function ContactForm({ onAdd, onCheckUnique }) {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const [name, setName] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n\r\n    const handleChangeForm = ({ target }) => {\r\n        const { name, value } = target;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'phone':\r\n                setPhone(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    function validateForm() {\r\n        if (!name || !phone) {\r\n            alert('Some field is empty');\r\n            return false;\r\n        }\r\n        return onCheckUnique(name);\r\n    }\r\n    const onSubmit = data => {\r\n        // const { name, phone } = data;\r\n        const isValidateForm = validateForm();\r\n        if (!isValidateForm) return;\r\n        onAdd({ id: uuid(), name, phone });\r\n        resetForm();\r\n        console.log('Submit', data, errors);\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setName('');\r\n        setPhone('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <input\r\n                className={css.input}\r\n                type=\"text\"\r\n                // name=\"name\"\r\n                placeholder=\"Enter name\"\r\n                {...register('name', {\r\n                    required: true,\r\n                    pattern:\r\n                        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n                })}\r\n                value={name}\r\n                required\r\n                onChange={handleChangeForm}\r\n            />\r\n            {errors.name && alert('Name is required.')}\r\n\r\n            <input\r\n                className={css.input}\r\n                type=\"tel\"\r\n                // name=\"phone\"\r\n                placeholder=\"Enter phone number\"\r\n                {...register('phone', {\r\n                    required: true,\r\n                    pattern:\r\n                        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\r\n                })}\r\n                value={phone}\r\n                required\r\n                onChange={handleChangeForm}\r\n            />\r\n            {errors.phone && alert('Please enter number for phone.')}\r\n\r\n            <Button type=\"submit\">Add Contact</Button>\r\n        </form>\r\n    );\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onAdd: PropTypes.func.isRequired,\r\n    onCheckUnique: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'UI/Button';\r\n\r\nimport css from './ContactList.module.css';\r\n\r\nconst ContactListItem = ({ name, phone, onRemove }) => {\r\n    return (\r\n        <li className={css.item}>\r\n            <span className={css.span}>\r\n                {name}:{phone}\r\n            </span>\r\n            <Button className=\"btn\" onClick={onRemove}>\r\n                Delete\r\n            </Button>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport const ContactList = ({ contacts, onRemove }) => {\r\n    console.log(contacts);\r\n    return (\r\n        <ul className={css.contacts}>\r\n            {contacts?.map(({ id, name, phone }) => (\r\n                <ContactListItem\r\n                    key={id}\r\n                    name={name}\r\n                    phone={phone}\r\n                    onRemove={() => onRemove(id)}\r\n                />\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.node.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            phone: PropTypes.string.isRequired,\r\n        }),\r\n    ).isRequired,\r\n    onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport css from './Filter.module.scss';\r\n\r\nexport const Filter = ({ filter, onChange }) => {\r\n    return (\r\n        <label className={css.label}>\r\n            <span className={css.labelText}>Find contacts by name</span>\r\n            <input\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={filter}\r\n                onChange={({ target }) => onChange(target.value)}\r\n                placeholder=\"Enter name for Search\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                className={css.input}\r\n            />\r\n        </label>\r\n    );\r\n};\r\n\r\nFilter.propTypes = {\r\n    filter: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Layout } from 'UI/Layout';\r\nimport { SectionWrap } from 'UI/SectionWrap';\r\nimport { ContactForm } from 'components/ContactForm';\r\nimport { ContactList } from 'components/ContactList';\r\nimport { Filter } from 'components/Filter';\r\nimport useLocalStorage from 'hooks/useLocalStorage';\r\nimport testContacts from 'server/contacts.json';\r\n\r\nexport default function App() {\r\n    const [contacts, setContacts] = useLocalStorage('contacts', testContacts);\r\n    const [filter, setFilter] = useState('');\r\n\r\n    const handleAddContact = newContact => {\r\n        setContacts(prevState => [...prevState, newContact]);\r\n        // setContacts([newContact, ...contacts]);\r\n    };\r\n\r\n    const handleCheckUniqueContact = name => {\r\n        const isExistContact = !!contacts.find(\r\n            contact => contact.name === name,\r\n        );\r\n        isExistContact && alert('Contact is already exist');\r\n\r\n        return !isExistContact;\r\n    };\r\n\r\n    const handleRemoveContact = id =>\r\n        setContacts(contacts.filter(contact => contact.id !== id));\r\n\r\n    const handleChangeFilter = filter => setFilter(filter);\r\n\r\n    const getVisibleContacts = () => {\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Layout>\r\n            <SectionWrap title=\"Phonebook\">\r\n                <ContactForm\r\n                    onAdd={handleAddContact}\r\n                    onCheckUnique={handleCheckUniqueContact}\r\n                />\r\n            </SectionWrap>\r\n\r\n            <SectionWrap title=\"Contact List\">\r\n                <Filter filter={filter} onChange={handleChangeFilter} />\r\n                <ContactList\r\n                    contacts={getVisibleContacts()}\r\n                    onRemove={handleRemoveContact}\r\n                />\r\n            </SectionWrap>\r\n        </Layout>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default function useLocalStorage(key, defaultValue) {\r\n    // console.log(defaultValue);\r\n    const [state, setState] = useState(\r\n        () => JSON.parse(window.localStorage.getItem(key)) ?? defaultValue,\r\n    );\r\n\r\n    useEffect(() => {\r\n        window.localStorage.setItem(key, JSON.stringify(state));\r\n    }, [key, state]);\r\n\r\n    return [state, setState];\r\n}\r\n","// Создаем действия(action) для каждого reduser(a).\nimport { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const addContact = createAction('add', data => ({\n    payload: {\n        id: uuidv4(),\n        name: data.name,\n        number: data.number,\n    },\n}));\n\nexport const deleteContact = createAction('delete');\n\nexport const changeFilter = createAction('changeFilter');\n","// Создаем отдельные части стейта - reducer(ы).\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, changeFilter } from './actions';\n\n// Прописывае в reducer логику взаимодействия с экшенами, где обработка каждого\n//    экшена это свойство обьекта ключом являеться имя экшена (в []) а значением\n//    результат вызова анонимной стрелочной ф-и.\n\nconst items = createReducer([], {\n    [addContact]: (state, { payload }) => [...state, payload],\n    [deleteContact]: (state, { payload }) =>\n        state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n    [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n    items,\n    filter,\n});\n","// Создаем глобальный стейт он же store.\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { logger } from 'redux-logger';\nimport contactsReducer from './contacts/reducer';\n\nconst contactsPersistConfig = {\n    key: 'contacts',\n    storage,\n    blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n    reducer: {\n        contacts: persistReducer(contactsPersistConfig, contactsReducer),\n    },\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","// Заворачиваем все приложение в файле index.js в компонент Provider и передаем\n//    в store через props.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}