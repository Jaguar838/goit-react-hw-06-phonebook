{"version":3,"sources":["components/Filter/Filter.module.scss","components/ContactForm/ContactForm.module.css","components/ContactItem/ContactItem.module.css","components/ContactList/ContactList.module.css","UI/Layout/Layout.style.js","UI/Layout/Layout.jsx","UI/SectionWrap/SectionWrap.style.js","UI/SectionWrap/SectionWrap.jsx","redux/contacts/actions.js","UI/Button/Button.style.js","UI/Button/Button.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","redux/contacts/reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","styled","div","Layout","children","Section","Title","h3","SectionWrap","title","addContact","createAction","data","payload","id","uuidv4","name","number","deleteContact","changeFilter","checkUnique","Btn","button","Button","onClick","defaultProps","ContactForm","useForm","register","handleSubmit","errors","formState","dispatch","useDispatch","useState","setName","phone","setPhone","handleChangeForm","target","value","validateForm","isExistContact","alert","onCheckUnique","resetForm","onSubmit","console","log","className","css","input","type","placeholder","required","pattern","onChange","ContactItem","item","span","getFilter","state","contacts","filter","getFilteredContacts","items","getContacts","toLowerCase","includes","ContactList","visibleContacts","useSelector","map","key","Filter","label","labelText","App","isPhonebook","length","createReducer","find","_","combineReducers","contactsPersistConfig","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","concat","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.622e7382.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1JgZC\",\"labelText\":\"Filter_labelText__25q76\",\"input\":\"Filter_input__1QcQD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__3sa9e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__3g4w5\",\"span\":\"ContactItem_span__1lRTI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__3ehm9\"};","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  width: 1280px;\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n\r\n  @media (max-width: 1283px) {\r\n    width: 940px;\r\n  }\r\n\r\n  @media (max-width: 992px) {\r\n    width: 700px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 520px;\r\n  }\r\n\r\n  @media (max-width: 576px) {\r\n    width: 90%;\r\n  }\r\n`;\r\n","import { Container } from './Layout.style';\r\nimport React from 'react';\r\n\r\nconst Layout = ({ children }) => <Container>{children}</Container>;\r\n\r\nexport default Layout;\r\n","import styled from 'styled-components';\r\n\r\nexport const Section = styled.div`\r\n    padding-top: 35px;\r\n    padding-bottom: 35px;\r\n    background-color: #fff;\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n    border-radius: 7px;\r\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\r\n    border: 1px solid rgba(128, 128, 128, 0.4);\r\n    margin-bottom: 30px;\r\n`;\r\n\r\nexport const Title = styled.h3`\r\n    margin-bottom: 15px;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Section, Title } from './SectionWrap.style';\r\n\r\nconst SectionWrap = ({ title, children }) => (\r\n    <Section>\r\n        {title && <Title>{title}</Title>}\r\n        {children}\r\n    </Section>\r\n);\r\n\r\nSectionWrap.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default SectionWrap;\r\n","// Создаем действия(action) для каждого reduser(a).\nimport { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const addContact = createAction('add', data => ({\n    payload: {\n        id: uuidv4(),\n        name: data.name,\n        number: data.number,\n    },\n}));\n\nexport const deleteContact = createAction('delete');\n\nexport const changeFilter = createAction('changeFilter');\nexport const checkUnique = createAction('checkUnique');\n","import styled from 'styled-components';\r\n\r\nexport const Btn = styled.button`\r\n    cursor: pointer;\r\n    color: #7366ff;\r\n    font-weight: 500;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    background-color: rgba(115, 102, 255, 0.15);\r\n    transition: all 0.3s ease;\r\n\r\n    display: inline-block;\r\n    margin: 0 10px;\r\n    padding: 10px;\r\n    min-width: 120px;\r\n    background-color: #30d5c8;\r\n    color: #ffffff;\r\n    font-weight: 700;\r\n    font-size: 14px;\r\n    letter-spacing: 0.02em;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    border-radius: 4px;\r\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\r\n    border: none;\r\n    cursor: pointer;\r\n    transition-property: color, background-color, box-shadow;\r\n    transition-duration: 250ms;\r\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n    &:hover,\r\n    &:focus {\r\n        color: #fff;\r\n        background-color: #7366ff;\r\n\r\n        color: #30d5c8;\r\n        background-color: #ffffff;\r\n        box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1),\r\n            0px 1px 2px rgba(0, 0, 0, 0.08), 0px 2px 2px rgba(0, 0, 0, 0.12);\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Btn } from './Button.style';\r\n\r\nconst Button = ({ children, onClick }) => (\r\n    <Btn onClick={onClick}>{children}</Btn>\r\n);\r\n\r\nButton.defaultProps = {\r\n    children: '',\r\n};\r\n\r\nButton.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact, checkUnique } from 'redux/contacts/actions';\nimport { useForm } from 'react-hook-form';\nimport { Button } from 'UI';\nimport css from './ContactForm.module.css';\n\nexport function ContactForm() {\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm();\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [phone, setPhone] = useState('');\n\n    const handleChangeForm = ({ target }) => {\n        const { name, value } = target;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'phone':\n                setPhone(value);\n                break;\n            default:\n                return;\n        }\n    };\n    const onCheckUnique = name => {\n        const isExistContact = !!dispatch(checkUnique(name));\n        isExistContact && alert('Contact is already exist');\n        return !isExistContact;\n    };\n    function validateForm() {\n        if (!name || !phone) {\n            alert('Some field is empty');\n            return false;\n        }\n        return onCheckUnique(name);\n    }\n    const onSubmit = data => {\n        // const { name, phone } = data;\n        const isValidateForm = validateForm();\n        if (!isValidateForm) return;\n        dispatch(addContact(data));\n        resetForm();\n        console.log('Submit', data, errors);\n    };\n\n    const resetForm = () => {\n        setName('');\n        setPhone('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <input\n                className={css.input}\n                type=\"text\"\n                placeholder=\"Enter name\"\n                {...register('name', {\n                    required: true,\n                    pattern:\n                        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n                })}\n                value={name}\n                onChange={handleChangeForm}\n            />\n            {errors.name && alert('Name is required.')}\n\n            <input\n                className={css.input}\n                type=\"tel\"\n                placeholder=\"Enter phone number\"\n                {...register('phone', {\n                    required: true,\n                    pattern:\n                        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n                })}\n                value={phone}\n                onChange={handleChangeForm}\n            />\n            {errors.phone && alert('Please enter number for phone.')}\n\n            <Button type=\"submit\">Add Contact</Button>\n        </form>\n    );\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/actions';\nimport { Button } from 'UI';\n\nimport css from './ContactItem.module.css';\n\nexport const ContactItem = ({ name, phone }) => {\n    const dispatch = useDispatch();\n    return (\n        <li className={css.item}>\n            <span className={css.span}>\n                {name}:{phone}\n            </span>\n            <Button className=\"btn\" onClick={id => dispatch(deleteContact(id))}>\n                Delete\n            </Button>\n        </li>\n    );\n};\n","// Для передачи данных из глобального стейта в компонент используються\n//    селекторы.\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = state => {\n    const contacts = getContacts(state);\n    const filter = getFilter(state);\n\n    return contacts.filter(({ name }) => name.toLowerCase().includes(filter));\n};\n\nexport const isPhonebook = state => state.contacts.items.length > 0;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { getFilteredContacts } from 'redux/contacts/selectors';\nimport css from './ContactList.module.css';\n\nexport const ContactList = () => {\n    const visibleContacts = useSelector(getFilteredContacts);\n    console.log('visibleContacts', visibleContacts);\n    return (\n        <ul className={css.contacts}>\n            {visibleContacts?.map(({ id, name, phone }) => (\n                <ContactItem key={id} name={name} phone={phone} />\n            ))}\n        </ul>\n    );\n};\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.node.isRequired,\n            name: PropTypes.string.isRequired,\n            phone: PropTypes.string.isRequired,\n        }),\n    ).isRequired,\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport PropTypes from 'prop-types';\nimport css from './Filter.module.scss';\nimport { changeFilter } from 'redux/contacts/actions';\n\nexport const Filter = () => {\n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n    return (\n        <label className={css.label}>\n            <span className={css.labelText}>Find contacts by name</span>\n            <input\n                type=\"text\"\n                name=\"filter\"\n                value={filter}\n                onChange={({ target }) => dispatch(changeFilter(target.value))}\n                placeholder=\"Enter name for Search\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n                className={css.input}\n            />\n        </label>\n    );\n};\n\nFilter.propTypes = {\n    filter: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Layout } from 'UI/Layout';\nimport { SectionWrap } from 'UI/SectionWrap';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\n// import { getFilteredContacts } from 'redux/contacts/selectors';\n\n// import useLocalStorage from 'hooks/useLocalStorage';\n// import testContacts from 'server/contacts.json';\n\nexport default function App() {\n    // const [contacts, setContacts] = useLocalStorage('contacts', testContacts);\n    // const [filter, setFilter] = useState('');\n\n    const isPhonebook = useSelector(state => state.contacts.items.length > 0);\n    // const dispatch = useDispatch();\n\n    // const handleChangeFilter = filter => setFilter(filter);\n\n    // const getVisibleContacts = () => {\n    //     return contacts.filter(contact =>\n    //         contact.name.toLowerCase().includes(filter.toLowerCase()),\n    //     );\n    // };\n\n    return (\n        <Layout>\n            <SectionWrap title=\"Phonebook\">\n                <ContactForm />\n            </SectionWrap>\n\n            <SectionWrap title=\"Contact List\">\n                {!isPhonebook ? (\n                    <>\n                        <Filter />\n                        <ContactList />\n                    </>\n                ) : (\n                    <p>Phonebook is empty</p>\n                )}\n            </SectionWrap>\n        </Layout>\n    );\n}\n","// Создаем отдельные части стейта - reducer(ы).\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n    addContact,\n    deleteContact,\n    checkUnique,\n    changeFilter,\n} from './actions';\n\n// Начальное состояние\nconst initialState = {\n    contacts: [\n        { id: 'id-1', name: 'Rosie Simpson', phone: '459-12-56' },\n        { id: 'id-2', name: 'Hermione Kline', phone: '443-89-12' },\n        { id: 'id-3', name: 'Eden Clements', phone: '645-17-79' },\n        { id: 'id-4', name: 'Annie Copeland', phone: '227-91-26' },\n    ],\n};\n\n// Прописывае в reducer логику взаимодействия с экшенами, где обработка каждого\n//    экшена это свойство обьекта\n// ключом являеться имя экшена(в[]) а значением результат вызова анонимной стрелочной ф-и.\n\nconst items = createReducer(initialState, {\n    [addContact]: (state, { payload }) => [...state, payload],\n    [deleteContact]: (state, { payload }) =>\n        state.filter(({ id }) => id !== payload),\n    [checkUnique]: (state, { payload }) =>\n        state.find(({ name }) => name === payload),\n});\n\nconst filter = createReducer('', {\n    [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n    items,\n    filter,\n});\n","// Создаем глобальный стейт он же store.\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { logger } from 'redux-logger';\nimport contactsReducer from './contacts/reducer';\n\nconst contactsPersistConfig = {\n    key: 'contacts',\n    storage,\n    blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n    reducer: {\n        contacts: persistReducer(contactsPersistConfig, contactsReducer),\n    },\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","// Заворачиваем все приложение в файле index.js в компонент Provider и передаем\n//    в store через props.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}